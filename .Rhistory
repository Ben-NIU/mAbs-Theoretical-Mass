master$DP.Date.of.DP.Manufacture
master$DP.Date.of.DP.Manufacture[11]
master<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",2)
to.fill<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",3)
for(i in 1:nrow(to.fill)){
for(j in 1:nrow(master)) {
if(as.character(to.fill$Client.Lot..[i]) == as.character(master$IMP.lot.number[j])) {
to.fill$DP.Lot[i]<-as.character(master$DP.lot.number[j])
to.fill$DP.DoM[i]<-master$DP.Date.of.DP.Manufacture[j]
}
}
}
to.fill$DP.DoM
str(to.fill$DP.DoM)
as.Date(to.fill$DP.DoM)
master
str(master$DP.Date.of.DP.Manufacture)
master<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",2)
to.fill<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",3)
for(i in 1:nrow(to.fill)){
for(j in 1:nrow(master)) {
if(as.character(to.fill$Client.Lot..[i]) == as.character(master$IMP.lot.number[j])) {
to.fill$DP.Lot[i]<-as.character(master$DP.lot.number[j])
to.fill$DP.DoM[i]<-as.character(master$DP.Date.of.DP.Manufacture[j])
}
}
}
head(to.fill,20)
as.Date(to.fill$DP.DoM)
?difftime
head(to.fill)
for(m in 1:nrow(to.fill)){
K<-difftime(to.fill$X.Dose.Date[m], to.fill$DP.DoM, units = "days")
}
K
to.fill$X.Dose.Date[1]
to.fill$DP.age.at.Dose.Date[7]
to.fill$DP.age.at.Dose.Date[8]
to.fill$DP.age.at.Dose.Date[11]
head(to.fill$DP.age.at.Dose.Date,100)
head(to.fill$DP.DoM,11)
to.fill$DP.DoM[11]
to.fill$DP.DoM[7]
x2<-to.fill$DP.DoM[7]
to.fill$X.Dose.Date[1]
x1<-to.fill$X.Dose.Date[1]
str(x1)
str(x2)
as.Date(x2)
difftime(as.Date(x2), x1, unit="days")
difftime(as.Date(x2), x1, unit="days")+1
str(difftime(as.Date(x2), x1, unit="days"))
for(m in 1:nrow(to.fill)){
K<-difftime(to.fill$X.Dose.Date[m], as.Date(to.fill$DP.DoM[m]), units = "days")
}
K
K<-NULL
for(m in 1:nrow(to.fill)){
K0<-difftime(to.fill$X.Dose.Date[m], as.Date(to.fill$DP.DoM[m]), units = "days")
K<-c(K,K0)
}
K
to.fill$DP.age.at.Dose.Date<-K
head(to.fill,100)
?write.xlsx
write.xlsx(to.fill, "C:/Users/kggb966/Desktop/to_fill.xlsx", "Sheet1")
write.xlsx(to.fill, "C:/Users/kggb966/Desktop/to_fill.xlsx", "Sheet1", row.names = FALSE)
str(to.fill$DP.DoM)
g<-as.Date(to.fill$DP.DoM)
g
format(g, format="%d %b, %Y")
master<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",2)
to.fill<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",3)
for(i in 1:nrow(to.fill)){
for(j in 1:nrow(master)) {
if(as.character(to.fill$Client.Lot..[i]) == as.character(master$IMP.lot.number[j])) {
to.fill$DP.Lot[i]<-as.character(master$DP.lot.number[j])
to.fill$DP.DoM[i]<-as.character(master$DP.Date.of.DP.Manufacture[j])
}
}
}
K<-NULL
for(m in 1:nrow(to.fill)){
K0<-difftime(to.fill$X.Dose.Date[m], as.Date(to.fill$DP.DoM[m]), units = "days")
K<-c(K,K0)
}
to.fill$DP.age.at.Dose.Date<-K
g<-as.Date(to.fill$DP.DoM)
to.fill$DP.DoM<-format(g, format="%d %b, %Y")
write.xlsx(to.fill, "C:/Users/kggb966/Desktop/to_fill_Feb212019.xlsx", "Sheet1", row.names = FALSE)
master<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",2)
to.fill<-read.xlsx("C:/Users/kggb966/Desktop/20190220 DP and Kit IDS Number Correlation.xlsx",3)
master$id<-paste(master$Type, master$IMP.lot.number, sep="_")
master$id
to.fill$id<-paste(to.fill$X.Kit.Type, to.fill$Client.Lot.., sep="_")
master$id
unique(master$id)
for(i in 1:nrow(to.fill)){
for(j in 1:nrow(master)) {
if(as.character(to.fill$id[i]) == as.character(master$id[j])) {
to.fill$DP.Lot[i]<-as.character(master$DP.lot.number[j])
to.fill$DP.DoM[i]<-as.character(master$DP.Date.of.DP.Manufacture[j])
}
}
}
K<-NULL
for(m in 1:nrow(to.fill)){
K0<-difftime(to.fill$X.Dose.Date[m], as.Date(to.fill$DP.DoM[m]), units = "days")
K<-c(K,K0)
}
to.fill$DP.age.at.Dose.Date<-K
g<-as.Date(to.fill$DP.DoM)
to.fill$DP.DoM<-format(g, format="%d %b, %Y")
write.xlsx(to.fill, "C:/Users/kggb966/Desktop/New_Feb212019.xlsx", "Sheet1", row.names = FALSE)
runApp('C:/Users/kggb966/Desktop/R/Shiny Apps/mAbs Theoretical Mass v2.0')
report.item.R<-function(rpt.pEhc, rpt.pElc, rpt.lys, rpt.glycan, rpt.uds.hc, rpt.uds.lc){
if(is.null(rpt.pEhc)){
rpt.pEhc<-"No"
}
if(is.null(rpt.pElc)){
rpt.pElc<-"No"
}
if(is.null(rpt.lys)){
rpt.lys<-"No"
}
if(is.null(rpt.glycan)){
rpt.glycan<-"Agly"
}
Q<-expand.grid("HC-PyroE"=rpt.pEhc, "LC-PyroE"=rpt.pElc, "Lys"=rpt.lys, "Glycan"=rpt.glycan, "unR.HC"=rpt.uds.hc, "unR.LC"=rpt.uds.lc)
return(Q)
}
report.item.R(NULL, NULL, "No", "Degly", 2,3)
report.item.R(NULL, NULL, "No", c("Degly","Agly"), 2,3)
report.item.R(NULL, NULL, c("No","Yes"), c("Degly","Agly"), 2,3)
Calc.Mass.R<-function(HC, LC, PyroE.hc, PyroE.lc, Lys, Glycan, unR.HC, unR.LC){
if(is.null(PyroE.hc)){
pyroe.hc<-0
} else {
if(PyroE.hc=="No"){
pyroe.hc<-0}
if(PyroE.hc=="Yes"){
if(substr(HC, 1,1)=="E"){
pyroe.hc<-c(C=0, H=-2, N=0, O=-1, S=0)} ## -18 Da
else if(substr(HC, 1,1)=="Q") {
pyroe.hc<-c(C=0, H=-3, N=-1, O=0, S=0)} ## -17 Da
}
}
if(is.null(PyroE.lc)){
pyroe.lc<-0
} else {
if(PyroE.lc=="No"){
pyroe.lc<-0}
if(PyroE.lc=="Yes"){
if(substr(HC, 1,1)=="E"){
pyroe.lc<-c(C=0, H=-2, N=0, O=-1, S=0)} ## -18 Da
else if(substr(HC, 1,1)=="Q") {
pyroe.lc<-c(C=0, H=-3, N=-1, O=0, S=0)} ## -17 Da
}
}
if(is.null(Lys)){
lys<-0
} else {
if(Lys=="No"){
lys<-0
} else if(Lys=="Yes") {
lys<-c(C=-6, H=-12, N=-2, O=-1, S=0)}
}
GLYCAN<-list("Agly"=c(C=0, H=0, N=0, O=0, S=0),"Degly"=c(C=0, H=-1, N=-1, O=1,S=0),'G0'=c("C"=50, "H"=82, "N"=4, "O"=35, "S"=0),"G0F"=c(C=56, H=92, N=4, O=39, S=0),"G1"=c(C=56, H=92, N=4, O=40, S=0),"G2"=c(C=62, H=102, N=4, O=45, S=0),"G1F"=c(C=62, H=102, N=4, O=44, S=0),"G2F"=c(C=68, H=112, N=4, O=49, S=0),"G0-GN"=c(C=42, H=69, N=3, O=30, S=0), "M5"=c(C=46, H=76, N=2, O=35, S=0), "M6"=c(C=52, H=86, N=2, O=40, S=0))
## with un-reduced DSB in HC and LC:
HC_1<-unlist(ConvertPeptide(HC, IAA=FALSE)) + pyroe.hc +lys + GLYCAN[[Glycan]]  + c(C=0, H=as.numeric(unR.HC)*(-2), N=0, O=0, S=0)
LC_1<-unlist(ConvertPeptide(LC, IAA=FALSE)) + pyroe.lc  + c(C=0, H=as.numeric(unR.LC)*(-2), N=0, O=0, S=0)
HC_2<-unlist(ConvertPeptide(HC, IAA=FALSE)) + pyroe.hc +lys + GLYCAN[[Glycan]]  + c(C=0, H=as.numeric(unR.HC)*(0), N=0, O=0, S=0)
LC_2<-unlist(ConvertPeptide(LC, IAA=FALSE)) + pyroe.lc  + c(C=0, H=as.numeric(unR.LC)*(0), N=0, O=0, S=0)
Reduced<-list("HC.withDSB"=HC_1, "LC.withDSB"=LC_1, "HC.fullR"=HC_2, "LC.fullR"=LC_2)
return(Reduced)
}
Calc.Mass.R("EYGGFL","QYGGGGGGF", "Yes","No",NULL, "Degly", 2 ,3)
Calc.Mass.R("EYGGFL","QYGGGGGGF", "Yes","No",NULL, "Degly", 3 ,2)
Calc.Mass.R("EYGGFL","QYGGGGGGF", "No","No",NULL, "Degly", 3 ,2)
v<-c("Degly", "Agly", "G0/G0", "G1/G0-GN")
v
v<-c("Degly", "Agly", "G0/G0", "G1/G0-GN", "M5/G0")
v
grepl("/", v)
grepl("/", NULL)
grepl("/", "")
grepl("/", v)
v[grepl("/", v)]
strsplit("G1/G0-GN", split = "/")[[1]]
v
h<-v
splt<-function(x) {strsplit(x, split = "/")[[1]]}
lapply(h, splt)
?do.call
do.call(lapply(h, splt),"c")
do.call("c",lapply(h, splt))
unique(do.call("c",lapply(h, splt)))
Split.glycans<-function(nonR.selected){
h<-nonR.selected[grepl("/", nonR.selected)]
splt<-function(x) {strsplit(x, split = "/")[[1]]}
return(unique(do.call("c",lapply(h, splt))))
}
Split.glycans(v)
v
grepl("/", v)
!grepl("/", v)
Split.glycans<-function(nonR.selected){
h<-nonR.selected[grepl("/", nonR.selected)]
splt<-function(x) {strsplit(x, split = "/")[[1]]}
uni.glycan<- unique(do.call("c",lapply(h, splt)))
hx<-nonR.selected[!grepl("/", nonR.selected)]
return(c(hx, uni.glycan))
}
Split.glycans(v)
vv<-c("Degly")
Split.glycans(vv)
report.item.R<-function(rpt.pEhc, rpt.pElc, rpt.lys, rpt.glycan, rpt.uds.hc, rpt.uds.lc){
source("Split.glycans.R")
if(is.null(rpt.pEhc)){
rpt.pEhc<-"No"
}
if(is.null(rpt.pElc)){
rpt.pElc<-"No"
}
if(is.null(rpt.lys)){
rpt.lys<-"No"
}
if(is.null(rpt.glycan)){
rpt.glycan<-"Agly"
} else (rpt.glycan<-Split.glycans(rpt.glycan))
Q<-expand.grid("HC-PyroE"=rpt.pEhc, "LC-PyroE"=rpt.pElc, "Lys"=rpt.lys, "Glycan"=rpt.glycan, "unR.HC"=rpt.uds.hc, "unR.LC"=rpt.uds.lc)
return(Q)
}
report.item.R<-function(rpt.pEhc, rpt.pElc, rpt.lys, rpt.glycan, rpt.uds.hc, rpt.uds.lc){
if(is.null(rpt.pEhc)){
rpt.pEhc<-"No"
}
if(is.null(rpt.pElc)){
rpt.pElc<-"No"
}
if(is.null(rpt.lys)){
rpt.lys<-"No"
}
if(is.null(rpt.glycan)){
rpt.glycan<-"Agly"
} else (rpt.glycan<-Split.glycans(rpt.glycan))
Q<-expand.grid("HC-PyroE"=rpt.pEhc, "LC-PyroE"=rpt.pElc, "Lys"=rpt.lys, "Glycan"=rpt.glycan, "unR.HC"=rpt.uds.hc, "unR.LC"=rpt.uds.lc)
return(Q)
}
report.item.R("No", "No", NULL, c("Degly", "Agly", "G0/G0", "G0/M5"), 3,2)
report.item.R(c("No","Yes"), "No", NULL, c("Degly", "Agly", "G0/G0", "G0/M5"), 3,2)
Calc.Mass.all.R<-function(HC, LC, Items){
Formu<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
Formu<-rbind(Formu, Formu0)
}
return(cbind(Items,Formu))
}
Calc.Mass.all.R("EYGGFL","QYGGGGGG", report.item.R(C("Yes","No"), "No", NULL, c("Degly", "Agly","G0/G0", "G0/M5"), 3,2))
Calc.Mass.all.R("EYGGFL","QYGGGGGG", report.item.R(c("Yes","No"), "No", NULL, c("Degly", "Agly","G0/G0", "G0/M5"), 3,2))
report.item.R(c("No","Yes"), "No", NULL, c("Degly", "Agly", "G0/G0", "G0/M5"), 3,2)
Items<-report.item.R(c("No","Yes"), "No", NULL, c("Degly", "Agly", "G0/G0", "G0/M5"), 3,2)
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB<-NULL
Formu.fullR<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB<-rbind(Formu.withDSB, Formu0$HC.withDSB, Formu0$LC.withDSB)
Formu.fullR<-rbind(Formu.fullR, Formu0$HC.fullR, Formu0$LC.fullR)
}
return(list("withDSB"=Formu.withDSB, "fullR"=Formu.fullR))
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Items
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
return(list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC))
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Items<-report.item.R(c("No","Yes"), c("No","Yes"), NULL, c("Degly", "Agly", "G0/G0", "G0/M5"), 3,2)
Items
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,2], List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,2], List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
return(FFF)
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)$HC.fullR
duplicate(Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)$HC.fullR)
duplicated(Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)$HC.fullR)
x<-Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)$HC.fullR
x[!duplicated(x),]
FFF
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,2], List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
no.dup<-function(x) {x[!duplicated(x), ]}
U<-do.call("list", lapply(FFF, no.dup))
return(U)
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Items
Calc.Mass.all.R<-function(HC, LC, Items){
\
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,c(2)], List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
no.dup<-function(x) {x[!duplicated(x), ]}
U<-do.call("list", lapply(FFF, no.dup))
return(U)
}
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,c(2)], List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
no.dup<-function(x) {x[!duplicated(x), ]}
U<-do.call("list", lapply(FFF, no.dup))
return(U)
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Items
Items[,2]
as.character(Items[,2])
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(as.character(Items[,c(2)]), List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
no.dup<-function(x) {x[!duplicated(x), ]}
U<-do.call("list", lapply(FFF, no.dup))
return(U)
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)$LC.fullR
str(Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)$LC.fullR)
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,-c(1,3,4,5,6)], List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
no.dup<-function(x) {x[!duplicated(x), ]}
U<-do.call("list", lapply(FFF, no.dup))
return(U)
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Items$`LC-PyroE`
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,c(2,6)], List$LC.fullR), "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
no.dup<-function(x) {x[!duplicated(x), ]}
U<-do.call("list", lapply(FFF, no.dup))
return(U)
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Calc.Mass.all.R<-function(HC, LC, Items){
Formu.withDSB.HC<-NULL
Formu.fullR.HC<-NULL
Formu.withDSB.LC<-NULL
Formu.fullR.LC<-NULL
for(j in 1:nrow(Items)){
Formu0<-Calc.Mass.R(HC, LC, as.character(Items[j,1]), as.character(Items[j,2]), as.character(Items[j,3]), as.character(Items[j,4]), Items[j,5], Items[j,6])
## Forum0 will be a list with 4 components: HC.withDSB", "LC.withDSB", "HC.fullR", "LC.fullR".
Formu.withDSB.HC<-rbind(Formu.withDSB.HC, Formu0$HC.withDSB)
Formu.fullR.HC<-rbind(Formu.fullR.HC, Formu0$HC.fullR)
Formu.withDSB.LC<-rbind(Formu.withDSB.LC, Formu0$LC.withDSB)
Formu.fullR.LC<-rbind(Formu.fullR.LC, Formu0$LC.fullR)
}
List<-list("HC.withDSB"=Formu.withDSB.HC, "HC.fullR"=Formu.fullR.HC, "LC.withDSB"=Formu.withDSB.LC, "LC.fullR"=Formu.fullR.LC)
FFF<-list("HC.fullR"=cbind(Items[,-c(2,5,6)], List$HC.fullR), "HC.withDSB"=cbind(Items[,-c(2,6)], List$HC.withDSB), "LC.fullR"=cbind(Items[,c(2,6)], List$LC.fullR)[,-2], "LC.withDSB"=cbind(Items[,c(2,6)], List$LC.withDSB))
no.dup<-function(x) {x[!duplicated(x), ]}
U<-do.call("list", lapply(FFF, no.dup))
return(U)
}
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
K<-Calc.Mass.all.R("EYGGFLLL","QRFFFKLL", Items)
K
K[[1]]
names(K[[1]])
which(names(K[[1]]) %in% c("C","H","N","O","S"))
K[[1]][,which(names(K[[1]]) %in% c("C","H","N","O","S"))]
Report.MassTable.R<-function(from.CalcTable){
comp<- from.CalcTable[,which(names(from.CalcTable) %in% c("C","H","N","O","S"))]
atomic<-c(C=12.0107, H=1.00794, N=14.0067, O=15.9994, S=32.065)
M<-NULL
for(h in 1:nrow(comp)){
M0<-format(round(sum(comp[h,]*atomic),2), nsmall=2)
M<-c(M, M0)
}
from.CalcTable$Mass<-M
return(from.CalcTable)
}
Report.MassTable.R(K[[1]])
Report.MassTable.R(K[[3]])
Report.MassTable.R(K[[4]])
Report.MassTable.R(K[[2]])
K
lapply(K, Report.MassTable.R)
runApp('C:/Users/kggb966/Desktop/R/Shiny Apps/Single-chain protein Theoretical Mass')
runApp('C:/Users/kggb966/Desktop/R/Shiny Apps/Single-chain protein Theoretical Mass')
runApp('C:/Users/kggb966/Desktop/R/Shiny Apps/mAbs Theoretical Mass v2.0')
runApp('C:/Users/kggb966/Desktop/R/Shiny Apps/mAbs Theoretical Mass v2.0')
runApp('C:/Users/kggb966/Desktop/R/Shiny Apps/mAbs Theoretical Mass v2.0')
